// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minitask_common_message.proto

#ifndef PROTOBUF_minitask_5fcommon_5fmessage_2eproto__INCLUDED
#define PROTOBUF_minitask_5fcommon_5fmessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace minitask {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_minitask_5fcommon_5fmessage_2eproto();
void protobuf_AssignDesc_minitask_5fcommon_5fmessage_2eproto();
void protobuf_ShutdownFile_minitask_5fcommon_5fmessage_2eproto();

class MsgHead;
class KeyValType;
class KeyValPack;

enum MsgHead_Type {
  MsgHead_Type_ReqMsg = 1,
  MsgHead_Type_RspMsg = 2
};
bool MsgHead_Type_IsValid(int value);
const MsgHead_Type MsgHead_Type_Type_MIN = MsgHead_Type_ReqMsg;
const MsgHead_Type MsgHead_Type_Type_MAX = MsgHead_Type_RspMsg;
const int MsgHead_Type_Type_ARRAYSIZE = MsgHead_Type_Type_MAX + 1;

const ::google::protobuf::EnumDescriptor* MsgHead_Type_descriptor();
inline const ::std::string& MsgHead_Type_Name(MsgHead_Type value) {
  return ::google::protobuf::internal::NameOfEnum(
    MsgHead_Type_descriptor(), value);
}
inline bool MsgHead_Type_Parse(
    const ::std::string& name, MsgHead_Type* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MsgHead_Type>(
    MsgHead_Type_descriptor(), name, value);
}
// ===================================================================

class MsgHead : public ::google::protobuf::Message {
 public:
  MsgHead();
  virtual ~MsgHead();

  MsgHead(const MsgHead& from);

  inline MsgHead& operator=(const MsgHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MsgHead& default_instance();

  void Swap(MsgHead* other);

  // implements Message ----------------------------------------------

  MsgHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MsgHead& from);
  void MergeFrom(const MsgHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MsgHead_Type Type;
  static const Type ReqMsg = MsgHead_Type_ReqMsg;
  static const Type RspMsg = MsgHead_Type_RspMsg;
  static inline bool Type_IsValid(int value) {
    return MsgHead_Type_IsValid(value);
  }
  static const Type Type_MIN =
    MsgHead_Type_Type_MIN;
  static const Type Type_MAX =
    MsgHead_Type_Type_MAX;
  static const int Type_ARRAYSIZE =
    MsgHead_Type_Type_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor*
  Type_descriptor() {
    return MsgHead_Type_descriptor();
  }
  static inline const ::std::string& Type_Name(Type value) {
    return MsgHead_Type_Name(value);
  }
  static inline bool Type_Parse(const ::std::string& name,
      Type* value) {
    return MsgHead_Type_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  // optional .minitask.MsgHead.Type type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::minitask::MsgHead_Type type() const;
  inline void set_type(::minitask::MsgHead_Type value);

  // optional string clientip = 4;
  inline bool has_clientip() const;
  inline void clear_clientip();
  static const int kClientipFieldNumber = 4;
  inline const ::std::string& clientip() const;
  inline void set_clientip(const ::std::string& value);
  inline void set_clientip(const char* value);
  inline void set_clientip(const char* value, size_t size);
  inline ::std::string* mutable_clientip();
  inline ::std::string* release_clientip();
  inline void set_allocated_clientip(::std::string* clientip);

  // @@protoc_insertion_point(class_scope:minitask.MsgHead)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_clientip();
  inline void clear_has_clientip();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* clientip_;
  int type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_minitask_5fcommon_5fmessage_2eproto();
  friend void protobuf_AssignDesc_minitask_5fcommon_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_minitask_5fcommon_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static MsgHead* default_instance_;
};
// -------------------------------------------------------------------

class KeyValType : public ::google::protobuf::Message {
 public:
  KeyValType();
  virtual ~KeyValType();

  KeyValType(const KeyValType& from);

  inline KeyValType& operator=(const KeyValType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValType& default_instance();

  void Swap(KeyValType* other);

  // implements Message ----------------------------------------------

  KeyValType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValType& from);
  void MergeFrom(const KeyValType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // optional bytes val = 2;
  inline bool has_val() const;
  inline void clear_val();
  static const int kValFieldNumber = 2;
  inline const ::std::string& val() const;
  inline void set_val(const ::std::string& value);
  inline void set_val(const char* value);
  inline void set_val(const void* value, size_t size);
  inline ::std::string* mutable_val();
  inline ::std::string* release_val();
  inline void set_allocated_val(::std::string* val);

  // @@protoc_insertion_point(class_scope:minitask.KeyValType)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_val();
  inline void clear_has_val();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* key_;
  ::std::string* val_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_minitask_5fcommon_5fmessage_2eproto();
  friend void protobuf_AssignDesc_minitask_5fcommon_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_minitask_5fcommon_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static KeyValType* default_instance_;
};
// -------------------------------------------------------------------

class KeyValPack : public ::google::protobuf::Message {
 public:
  KeyValPack();
  virtual ~KeyValPack();

  KeyValPack(const KeyValPack& from);

  inline KeyValPack& operator=(const KeyValPack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KeyValPack& default_instance();

  void Swap(KeyValPack* other);

  // implements Message ----------------------------------------------

  KeyValPack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KeyValPack& from);
  void MergeFrom(const KeyValPack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .minitask.KeyValType keyvaltmp = 1;
  inline int keyvaltmp_size() const;
  inline void clear_keyvaltmp();
  static const int kKeyvaltmpFieldNumber = 1;
  inline const ::minitask::KeyValType& keyvaltmp(int index) const;
  inline ::minitask::KeyValType* mutable_keyvaltmp(int index);
  inline ::minitask::KeyValType* add_keyvaltmp();
  inline const ::google::protobuf::RepeatedPtrField< ::minitask::KeyValType >&
      keyvaltmp() const;
  inline ::google::protobuf::RepeatedPtrField< ::minitask::KeyValType >*
      mutable_keyvaltmp();

  // @@protoc_insertion_point(class_scope:minitask.KeyValPack)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::minitask::KeyValType > keyvaltmp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_minitask_5fcommon_5fmessage_2eproto();
  friend void protobuf_AssignDesc_minitask_5fcommon_5fmessage_2eproto();
  friend void protobuf_ShutdownFile_minitask_5fcommon_5fmessage_2eproto();

  void InitAsDefaultInstance();
  static KeyValPack* default_instance_;
};
// ===================================================================


// ===================================================================

// MsgHead

// optional .minitask.MsgHead.Type type = 3;
inline bool MsgHead::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MsgHead::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MsgHead::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MsgHead::clear_type() {
  type_ = 1;
  clear_has_type();
}
inline ::minitask::MsgHead_Type MsgHead::type() const {
  return static_cast< ::minitask::MsgHead_Type >(type_);
}
inline void MsgHead::set_type(::minitask::MsgHead_Type value) {
  assert(::minitask::MsgHead_Type_IsValid(value));
  set_has_type();
  type_ = value;
}

// optional string clientip = 4;
inline bool MsgHead::has_clientip() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MsgHead::set_has_clientip() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MsgHead::clear_has_clientip() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MsgHead::clear_clientip() {
  if (clientip_ != &::google::protobuf::internal::kEmptyString) {
    clientip_->clear();
  }
  clear_has_clientip();
}
inline const ::std::string& MsgHead::clientip() const {
  return *clientip_;
}
inline void MsgHead::set_clientip(const ::std::string& value) {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::kEmptyString) {
    clientip_ = new ::std::string;
  }
  clientip_->assign(value);
}
inline void MsgHead::set_clientip(const char* value) {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::kEmptyString) {
    clientip_ = new ::std::string;
  }
  clientip_->assign(value);
}
inline void MsgHead::set_clientip(const char* value, size_t size) {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::kEmptyString) {
    clientip_ = new ::std::string;
  }
  clientip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MsgHead::mutable_clientip() {
  set_has_clientip();
  if (clientip_ == &::google::protobuf::internal::kEmptyString) {
    clientip_ = new ::std::string;
  }
  return clientip_;
}
inline ::std::string* MsgHead::release_clientip() {
  clear_has_clientip();
  if (clientip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clientip_;
    clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MsgHead::set_allocated_clientip(::std::string* clientip) {
  if (clientip_ != &::google::protobuf::internal::kEmptyString) {
    delete clientip_;
  }
  if (clientip) {
    set_has_clientip();
    clientip_ = clientip;
  } else {
    clear_has_clientip();
    clientip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// KeyValType

// required string key = 1;
inline bool KeyValType::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KeyValType::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KeyValType::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KeyValType::clear_key() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& KeyValType::key() const {
  return *key_;
}
inline void KeyValType::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValType::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(value);
}
inline void KeyValType::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValType::mutable_key() {
  set_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    key_ = new ::std::string;
  }
  return key_;
}
inline ::std::string* KeyValType::release_key() {
  clear_has_key();
  if (key_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyValType::set_allocated_key(::std::string* key) {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional bytes val = 2;
inline bool KeyValType::has_val() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KeyValType::set_has_val() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KeyValType::clear_has_val() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KeyValType::clear_val() {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    val_->clear();
  }
  clear_has_val();
}
inline const ::std::string& KeyValType::val() const {
  return *val_;
}
inline void KeyValType::set_val(const ::std::string& value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void KeyValType::set_val(const char* value) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(value);
}
inline void KeyValType::set_val(const void* value, size_t size) {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  val_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KeyValType::mutable_val() {
  set_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    val_ = new ::std::string;
  }
  return val_;
}
inline ::std::string* KeyValType::release_val() {
  clear_has_val();
  if (val_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = val_;
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KeyValType::set_allocated_val(::std::string* val) {
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (val) {
    set_has_val();
    val_ = val;
  } else {
    clear_has_val();
    val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// KeyValPack

// repeated .minitask.KeyValType keyvaltmp = 1;
inline int KeyValPack::keyvaltmp_size() const {
  return keyvaltmp_.size();
}
inline void KeyValPack::clear_keyvaltmp() {
  keyvaltmp_.Clear();
}
inline const ::minitask::KeyValType& KeyValPack::keyvaltmp(int index) const {
  return keyvaltmp_.Get(index);
}
inline ::minitask::KeyValType* KeyValPack::mutable_keyvaltmp(int index) {
  return keyvaltmp_.Mutable(index);
}
inline ::minitask::KeyValType* KeyValPack::add_keyvaltmp() {
  return keyvaltmp_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::minitask::KeyValType >&
KeyValPack::keyvaltmp() const {
  return keyvaltmp_;
}
inline ::google::protobuf::RepeatedPtrField< ::minitask::KeyValType >*
KeyValPack::mutable_keyvaltmp() {
  return &keyvaltmp_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace minitask

#ifndef SWIG
namespace google {
namespace protobuf {

template <>
inline const EnumDescriptor* GetEnumDescriptor< ::minitask::MsgHead_Type>() {
  return ::minitask::MsgHead_Type_descriptor();
}

}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_minitask_5fcommon_5fmessage_2eproto__INCLUDED
