// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: minitask_common_message.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "minitask_common_message.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace minitask {

namespace {

const ::google::protobuf::Descriptor* KeyValType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValType_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyValTab_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyValTab_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyAddrType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyAddrType_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddrType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddrType_reflection_ = NULL;
const ::google::protobuf::Descriptor* KeyAddrTab_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KeyAddrTab_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_minitask_5fcommon_5fmessage_2eproto() {
  protobuf_AddDesc_minitask_5fcommon_5fmessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "minitask_common_message.proto");
  GOOGLE_CHECK(file != NULL);
  KeyValType_descriptor_ = file->message_type(0);
  static const int KeyValType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValType, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValType, val_),
  };
  KeyValType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValType_descriptor_,
      KeyValType::default_instance_,
      KeyValType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValType));
  KeyValTab_descriptor_ = file->message_type(1);
  static const int KeyValTab_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValTab, keyvaltmp_),
  };
  KeyValTab_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyValTab_descriptor_,
      KeyValTab::default_instance_,
      KeyValTab_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValTab, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyValTab, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyValTab));
  KeyAddrType_descriptor_ = file->message_type(2);
  static const int KeyAddrType_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyAddrType, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyAddrType, sockaddr_),
  };
  KeyAddrType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyAddrType_descriptor_,
      KeyAddrType::default_instance_,
      KeyAddrType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyAddrType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyAddrType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyAddrType));
  AddrType_descriptor_ = file->message_type(3);
  static const int AddrType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrType, domain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrType, addr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrType, port_),
  };
  AddrType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddrType_descriptor_,
      AddrType::default_instance_,
      AddrType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddrType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddrType));
  KeyAddrTab_descriptor_ = file->message_type(4);
  static const int KeyAddrTab_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyAddrTab, kadrecord_),
  };
  KeyAddrTab_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KeyAddrTab_descriptor_,
      KeyAddrTab::default_instance_,
      KeyAddrTab_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyAddrTab, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KeyAddrTab, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KeyAddrTab));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_minitask_5fcommon_5fmessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValType_descriptor_, &KeyValType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyValTab_descriptor_, &KeyValTab::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyAddrType_descriptor_, &KeyAddrType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddrType_descriptor_, &AddrType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KeyAddrTab_descriptor_, &KeyAddrTab::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_minitask_5fcommon_5fmessage_2eproto() {
  delete KeyValType::default_instance_;
  delete KeyValType_reflection_;
  delete KeyValTab::default_instance_;
  delete KeyValTab_reflection_;
  delete KeyAddrType::default_instance_;
  delete KeyAddrType_reflection_;
  delete AddrType::default_instance_;
  delete AddrType_reflection_;
  delete KeyAddrTab::default_instance_;
  delete KeyAddrTab_reflection_;
}

void protobuf_AddDesc_minitask_5fcommon_5fmessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035minitask_common_message.proto\022\010minitas"
    "k\"&\n\nKeyValType\022\013\n\003key\030\001 \002(\t\022\013\n\003val\030\002 \001("
    "\014\"4\n\tKeyValTab\022\'\n\tkeyvaltmp\030\001 \003(\0132\024.mini"
    "task.KeyValType\"@\n\013KeyAddrType\022\013\n\003key\030\001 "
    "\002(\t\022$\n\010sockaddr\030\002 \002(\0132\022.minitask.AddrTyp"
    "e\"6\n\010AddrType\022\016\n\006domain\030\001 \002(\t\022\014\n\004addr\030\002 "
    "\002(\t\022\014\n\004port\030\003 \002(\t\"6\n\nKeyAddrTab\022(\n\tkadre"
    "cord\030\001 \003(\0132\025.minitask.KeyAddrType", 313);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "minitask_common_message.proto", &protobuf_RegisterTypes);
  KeyValType::default_instance_ = new KeyValType();
  KeyValTab::default_instance_ = new KeyValTab();
  KeyAddrType::default_instance_ = new KeyAddrType();
  AddrType::default_instance_ = new AddrType();
  KeyAddrTab::default_instance_ = new KeyAddrTab();
  KeyValType::default_instance_->InitAsDefaultInstance();
  KeyValTab::default_instance_->InitAsDefaultInstance();
  KeyAddrType::default_instance_->InitAsDefaultInstance();
  AddrType::default_instance_->InitAsDefaultInstance();
  KeyAddrTab::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_minitask_5fcommon_5fmessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_minitask_5fcommon_5fmessage_2eproto {
  StaticDescriptorInitializer_minitask_5fcommon_5fmessage_2eproto() {
    protobuf_AddDesc_minitask_5fcommon_5fmessage_2eproto();
  }
} static_descriptor_initializer_minitask_5fcommon_5fmessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int KeyValType::kKeyFieldNumber;
const int KeyValType::kValFieldNumber;
#endif  // !_MSC_VER

KeyValType::KeyValType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValType::InitAsDefaultInstance() {
}

KeyValType::KeyValType(const KeyValType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValType::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  val_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValType::~KeyValType() {
  SharedDtor();
}

void KeyValType::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (val_ != &::google::protobuf::internal::kEmptyString) {
    delete val_;
  }
  if (this != default_instance_) {
  }
}

void KeyValType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValType_descriptor_;
}

const KeyValType& KeyValType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minitask_5fcommon_5fmessage_2eproto();
  return *default_instance_;
}

KeyValType* KeyValType::default_instance_ = NULL;

KeyValType* KeyValType::New() const {
  return new KeyValType;
}

void KeyValType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_val()) {
      if (val_ != &::google::protobuf::internal::kEmptyString) {
        val_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_val;
        break;
      }

      // optional bytes val = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_val:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_val()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // optional bytes val = 2;
  if (has_val()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->val(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // optional bytes val = 2;
  if (has_val()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->val(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // optional bytes val = 2;
    if (has_val()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->val());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValType::MergeFrom(const KeyValType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_val()) {
      set_val(from.val());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValType::CopyFrom(const KeyValType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KeyValType::Swap(KeyValType* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(val_, other->val_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValType_descriptor_;
  metadata.reflection = KeyValType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyValTab::kKeyvaltmpFieldNumber;
#endif  // !_MSC_VER

KeyValTab::KeyValTab()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyValTab::InitAsDefaultInstance() {
}

KeyValTab::KeyValTab(const KeyValTab& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyValTab::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyValTab::~KeyValTab() {
  SharedDtor();
}

void KeyValTab::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyValTab::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyValTab::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyValTab_descriptor_;
}

const KeyValTab& KeyValTab::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minitask_5fcommon_5fmessage_2eproto();
  return *default_instance_;
}

KeyValTab* KeyValTab::default_instance_ = NULL;

KeyValTab* KeyValTab::New() const {
  return new KeyValTab;
}

void KeyValTab::Clear() {
  keyvaltmp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyValTab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .minitask.KeyValType keyvaltmp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_keyvaltmp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_keyvaltmp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_keyvaltmp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyValTab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .minitask.KeyValType keyvaltmp = 1;
  for (int i = 0; i < this->keyvaltmp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->keyvaltmp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyValTab::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .minitask.KeyValType keyvaltmp = 1;
  for (int i = 0; i < this->keyvaltmp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->keyvaltmp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyValTab::ByteSize() const {
  int total_size = 0;

  // repeated .minitask.KeyValType keyvaltmp = 1;
  total_size += 1 * this->keyvaltmp_size();
  for (int i = 0; i < this->keyvaltmp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->keyvaltmp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyValTab::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyValTab* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyValTab*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyValTab::MergeFrom(const KeyValTab& from) {
  GOOGLE_CHECK_NE(&from, this);
  keyvaltmp_.MergeFrom(from.keyvaltmp_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyValTab::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyValTab::CopyFrom(const KeyValTab& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyValTab::IsInitialized() const {

  for (int i = 0; i < keyvaltmp_size(); i++) {
    if (!this->keyvaltmp(i).IsInitialized()) return false;
  }
  return true;
}

void KeyValTab::Swap(KeyValTab* other) {
  if (other != this) {
    keyvaltmp_.Swap(&other->keyvaltmp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyValTab::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyValTab_descriptor_;
  metadata.reflection = KeyValTab_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyAddrType::kKeyFieldNumber;
const int KeyAddrType::kSockaddrFieldNumber;
#endif  // !_MSC_VER

KeyAddrType::KeyAddrType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyAddrType::InitAsDefaultInstance() {
  sockaddr_ = const_cast< ::minitask::AddrType*>(&::minitask::AddrType::default_instance());
}

KeyAddrType::KeyAddrType(const KeyAddrType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyAddrType::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sockaddr_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyAddrType::~KeyAddrType() {
  SharedDtor();
}

void KeyAddrType::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
    delete sockaddr_;
  }
}

void KeyAddrType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyAddrType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyAddrType_descriptor_;
}

const KeyAddrType& KeyAddrType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minitask_5fcommon_5fmessage_2eproto();
  return *default_instance_;
}

KeyAddrType* KeyAddrType::default_instance_ = NULL;

KeyAddrType* KeyAddrType::New() const {
  return new KeyAddrType;
}

void KeyAddrType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_sockaddr()) {
      if (sockaddr_ != NULL) sockaddr_->::minitask::AddrType::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyAddrType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sockaddr;
        break;
      }

      // required .minitask.AddrType sockaddr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sockaddr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_sockaddr()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyAddrType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required .minitask.AddrType sockaddr = 2;
  if (has_sockaddr()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->sockaddr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyAddrType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required .minitask.AddrType sockaddr = 2;
  if (has_sockaddr()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->sockaddr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyAddrType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required .minitask.AddrType sockaddr = 2;
    if (has_sockaddr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->sockaddr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyAddrType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyAddrType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyAddrType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyAddrType::MergeFrom(const KeyAddrType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_sockaddr()) {
      mutable_sockaddr()->::minitask::AddrType::MergeFrom(from.sockaddr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyAddrType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyAddrType::CopyFrom(const KeyAddrType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyAddrType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_sockaddr()) {
    if (!this->sockaddr().IsInitialized()) return false;
  }
  return true;
}

void KeyAddrType::Swap(KeyAddrType* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(sockaddr_, other->sockaddr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyAddrType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyAddrType_descriptor_;
  metadata.reflection = KeyAddrType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddrType::kDomainFieldNumber;
const int AddrType::kAddrFieldNumber;
const int AddrType::kPortFieldNumber;
#endif  // !_MSC_VER

AddrType::AddrType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddrType::InitAsDefaultInstance() {
}

AddrType::AddrType(const AddrType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddrType::SharedCtor() {
  _cached_size_ = 0;
  domain_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addr_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddrType::~AddrType() {
  SharedDtor();
}

void AddrType::SharedDtor() {
  if (domain_ != &::google::protobuf::internal::kEmptyString) {
    delete domain_;
  }
  if (addr_ != &::google::protobuf::internal::kEmptyString) {
    delete addr_;
  }
  if (port_ != &::google::protobuf::internal::kEmptyString) {
    delete port_;
  }
  if (this != default_instance_) {
  }
}

void AddrType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddrType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddrType_descriptor_;
}

const AddrType& AddrType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minitask_5fcommon_5fmessage_2eproto();
  return *default_instance_;
}

AddrType* AddrType::default_instance_ = NULL;

AddrType* AddrType::New() const {
  return new AddrType;
}

void AddrType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_domain()) {
      if (domain_ != &::google::protobuf::internal::kEmptyString) {
        domain_->clear();
      }
    }
    if (has_addr()) {
      if (addr_ != &::google::protobuf::internal::kEmptyString) {
        addr_->clear();
      }
    }
    if (has_port()) {
      if (port_ != &::google::protobuf::internal::kEmptyString) {
        port_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddrType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string domain = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_addr;
        break;
      }

      // required string addr = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_addr:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addr()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->addr().data(), this->addr().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_port;
        break;
      }

      // required string port = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_port:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddrType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->domain(), output);
  }

  // required string addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->addr(), output);
  }

  // required string port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->port(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddrType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string domain = 1;
  if (has_domain()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->domain(), target);
  }

  // required string addr = 2;
  if (has_addr()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->addr().data(), this->addr().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->addr(), target);
  }

  // required string port = 3;
  if (has_port()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->port(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddrType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string domain = 1;
    if (has_domain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->domain());
    }

    // required string addr = 2;
    if (has_addr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->addr());
    }

    // required string port = 3;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->port());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddrType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddrType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddrType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddrType::MergeFrom(const AddrType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_domain()) {
      set_domain(from.domain());
    }
    if (from.has_addr()) {
      set_addr(from.addr());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddrType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddrType::CopyFrom(const AddrType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddrType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AddrType::Swap(AddrType* other) {
  if (other != this) {
    std::swap(domain_, other->domain_);
    std::swap(addr_, other->addr_);
    std::swap(port_, other->port_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddrType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddrType_descriptor_;
  metadata.reflection = AddrType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KeyAddrTab::kKadrecordFieldNumber;
#endif  // !_MSC_VER

KeyAddrTab::KeyAddrTab()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KeyAddrTab::InitAsDefaultInstance() {
}

KeyAddrTab::KeyAddrTab(const KeyAddrTab& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KeyAddrTab::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KeyAddrTab::~KeyAddrTab() {
  SharedDtor();
}

void KeyAddrTab::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KeyAddrTab::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KeyAddrTab::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KeyAddrTab_descriptor_;
}

const KeyAddrTab& KeyAddrTab::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_minitask_5fcommon_5fmessage_2eproto();
  return *default_instance_;
}

KeyAddrTab* KeyAddrTab::default_instance_ = NULL;

KeyAddrTab* KeyAddrTab::New() const {
  return new KeyAddrTab;
}

void KeyAddrTab::Clear() {
  kadrecord_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KeyAddrTab::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .minitask.KeyAddrType kadrecord = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_kadrecord:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_kadrecord()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_kadrecord;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KeyAddrTab::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .minitask.KeyAddrType kadrecord = 1;
  for (int i = 0; i < this->kadrecord_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->kadrecord(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KeyAddrTab::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .minitask.KeyAddrType kadrecord = 1;
  for (int i = 0; i < this->kadrecord_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->kadrecord(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KeyAddrTab::ByteSize() const {
  int total_size = 0;

  // repeated .minitask.KeyAddrType kadrecord = 1;
  total_size += 1 * this->kadrecord_size();
  for (int i = 0; i < this->kadrecord_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->kadrecord(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyAddrTab::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KeyAddrTab* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KeyAddrTab*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KeyAddrTab::MergeFrom(const KeyAddrTab& from) {
  GOOGLE_CHECK_NE(&from, this);
  kadrecord_.MergeFrom(from.kadrecord_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KeyAddrTab::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KeyAddrTab::CopyFrom(const KeyAddrTab& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyAddrTab::IsInitialized() const {

  for (int i = 0; i < kadrecord_size(); i++) {
    if (!this->kadrecord(i).IsInitialized()) return false;
  }
  return true;
}

void KeyAddrTab::Swap(KeyAddrTab* other) {
  if (other != this) {
    kadrecord_.Swap(&other->kadrecord_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KeyAddrTab::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KeyAddrTab_descriptor_;
  metadata.reflection = KeyAddrTab_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace minitask

// @@protoc_insertion_point(global_scope)
